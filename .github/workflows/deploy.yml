name: CI/CD Pipeline with Security Testing

on:
  push:
    branches:
      - master  # Déclenche le pipeline pour les commits dans la branche "master"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # 1. Vérifier d'abord si un conteneur Juice Shop existe déjà
    - name: Check if Juice Shop is already running
      id: check-container
      run: |
        if docker ps --filter "name=juice-shop" --filter "status=running" | grep juice-shop; then
          echo "running=true" >> $GITHUB_ENV
        else
          echo "running=false" >> $GITHUB_ENV
        fi

    # 2. Arrêter et supprimer l'ancien conteneur si nécessaire
    - name: Clean up existing container
      if: env.running == 'true'
      run: |
        docker stop juice-shop
        docker rm juice-shop

    # 3. Lancer un nouveau conteneur
    - name: Run Juice Shop container
      if: env.running == 'false'
      run: |
        docker run -d -p 3000:3000 --name juice-shop bkimminich/juice-shop:latest

    # 4. Attendre que Juice Shop démarre
    - name: Wait for Juice Shop to start
      run: |
        for i in {1..30}; do
          if curl -I http://localhost:3000 2>/dev/null | grep "200 OK"; then
            echo "Juice Shop is ready!";
            break;
          fi;
          echo "Waiting for Juice Shop...";
          sleep 2;
        done

    # 5. Tester l'application pour vérifier qu'elle fonctionne
    - name: Test application
      run: |
        curl -I http://localhost:3000 | grep "200 OK"

    # 6. Liste des conteneurs actifs pour débogage
    - name: List running containers
      run: docker ps

  # SAST (Static Application Security Testing)
  sast:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: javascript  # Utilisez javascript ou autre si nécessaire

    - name: Analyze with CodeQL
      uses: github/codeql-action/analyze@v2
      continue-on-error: true  # Laisse le pipeline continuer même si des erreurs de sécurité sont trouvées

  # SCA (Software Composition Analysis) - Dépendances
  sca:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Dependency-Check CLI
      run: |
        curl -L https://github.com/jeremydmiller/dotnet-dependency-check/releases/download/6.1.0/dependency-check-cli-6.1.0.zip -o dependency-check.zip
        unzip dependency-check.zip
        chmod +x dependency-check

    - name: Run SCA (Dependency Check)
      run: |
        ./dependency-check/bin/dependency-check.sh --project OWASP-Juice-Shop --scan . --out ./dependency-check-report

    - name: Upload Dependency Check Report
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: ./dependency-check-report

  # DAST (Dynamic Application Security Testing)
dast: 
   runs-on: ubuntu-latest
   needs: deploy

   steps:
   - name: Install OWASP ZAP via Snap
     run: |
      sudo apt update
      sudo snap install zaproxy --classic

   - name: Start OWASP ZAP
     run: |
      zaproxy -daemon -host 0.0.0.0 -port 8080
      sleep 5

   - name: Run OWASP ZAP Scan
     run: |
      zap-cli quick-scan --url http://localhost:3000

   - name: Generate OWASP ZAP HTML Report
     run: |
      zaproxy -cmd -quickurl http://localhost:3000 -quickout zap-report.html
      cat zap-report.html

   - name: Upload OWASP ZAP Report
     uses: actions/upload-artifact@v3
     with:
      name: zap-report
      path: zap-report.html
