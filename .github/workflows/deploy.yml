name: CI/CD et Sécurité pour OWASP Juice Shop

on:
  push:
    branches:
      - master  # Déclenche le workflow pour les commits sur la branche "master"

jobs:
  # Étape 1 : Déploiement de Juice Shop
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Vérifier si le conteneur Juice Shop est déjà en cours d'exécution
      - name: Vérifier si Juice Shop est déjà en cours d'exécution
        id: check-container
        run: |
          if docker ps --filter "name=juice-shop" --filter "status=running" | grep juice-shop; then
            echo "running=true" >> $GITHUB_ENV
          else
            echo "running=false" >> $GITHUB_ENV
          fi

      # Arrêter et supprimer le conteneur existant, si nécessaire
      - name: Nettoyer le conteneur existant
        if: env.running == 'true'
        run: |
          docker stop juice-shop
          docker rm juice-shop

      # Télécharger et exécuter un nouveau conteneur
      - name: Lancer le conteneur Juice Shop
        run: |
          docker pull bkimminich/juice-shop:latest
          docker run -d -p 3000:3000 --name juice-shop bkimminich/juice-shop:latest

      # Attendre que Juice Shop démarre
      - name: Attendre que Juice Shop démarre
        run: |
          for i in {1..30}; do
            if curl -I http://localhost:3000 2>/dev/null | grep "200 OK"; then
              echo "Juice Shop est prêt!";
              break;
            fi;
            echo "Attente du démarrage de Juice Shop...";
            sleep 2;
          done

      # Tester l'application
      - name: Tester l'application
        run: |
          curl -I http://localhost:3000 | grep "200 OK"

  # Étape 2 : SAST avec CodeQL
  sast:
    runs-on: ubuntu-latest
    needs: deploy  # Exécute cette tâche uniquement après le déploiement

    steps:
      # Initialiser CodeQL
      - name: Initialiser CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      # Analyser le code avec CodeQL
      - name: Analyse SAST avec CodeQL
        uses: github/codeql-action/analyze@v2

  # Étape 3 : SCA avec OWASP Dependency Check
  sca:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      # Installer OWASP Dependency Check
      - name: Installer OWASP Dependency Check
        run: |
          curl -LO https://github.com/jeremylong/DependencyCheck/releases/download/v8.3.1/dependency-check-8.3.1-release.zip
          unzip dependency-check-8.3.1-release.zip -d dependency-check

      # Exécuter Dependency Check
      - name: Analyser les dépendances avec OWASP Dependency Check
        run: |
          ./dependency-check/bin/dependency-check.sh --project "Juice Shop" --scan . --format ALL --out ./dependency-check-report

      # Télécharger le rapport Dependency Check
      - name: Télécharger le rapport Dependency Check
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: ./dependency-check-report

  # Étape 4 : DAST avec OWASP ZAP
  dast:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      # Installer OWASP ZAP
      - name: Installer OWASP ZAP
        run: sudo apt-get update && sudo apt-get install -y zaproxy

      # Démarrer OWASP ZAP en mode démon
      - name: Démarrer OWASP ZAP
        run: |
          zap.sh -daemon -host 0.0.0.0 -port 8080 -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true
          sleep 15  # Attendre que ZAP démarre

      # Exécuter un scan rapide avec ZAP
      - name: Exécuter un scan rapide OWASP ZAP
        run: |
          zap-cli quick-scan --self-contained --start-options "-config api.addrs.addr.name=.* -config api.addrs.addr.regex=true" http://localhost:3000

      # Générer un rapport ZAP
      - name: Générer le rapport ZAP
        run: |
          zap-cli report -o zap-report.html -f html

      # Télécharger le rapport ZAP
      - name: Télécharger le rapport ZAP
        uses: actions/upload-artifact@v3
        with:
          name: zap-report
          path: zap-report.html
