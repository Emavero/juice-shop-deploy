name: CI/CD et Sécurité pour OWASP Juice Shop

on:
  push:
    branches:
      - master  # Déclenche le workflow pour les commits sur la branche "master"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Étapes de déploiement de Juice Shop (comme dans votre configuration précédente)
      - name: Vérifier si Juice Shop est déjà en cours d'exécution
        id: check-container
        run: |
          if docker ps --filter "name=juice-shop" --filter "status=running" | grep juice-shop; then
            echo "running=true" >> $GITHUB_ENV
          else
            echo "running=false" >> $GITHUB_ENV
          fi

      - name: Nettoyer le conteneur existant
        if: env.running == 'true'
        run: |
          docker stop juice-shop
          docker rm juice-shop

      - name: Lancer le conteneur Juice Shop
        run: |
          docker pull bkimminich/juice-shop:latest
          docker run -d -p 3000:3000 --name juice-shop bkimminich/juice-shop:latest

      - name: Attendre que Juice Shop démarre
        run: |
          for i in {1..30}; do
            if curl -I http://localhost:3000 2>/dev/null | grep "200 OK"; then
              echo "Juice Shop est prêt!";
              break;
            fi;
            echo "Attente du démarrage de Juice Shop...";
            sleep 2;
          done

      - name: Tester l'application
        run: |
          curl -I http://localhost:3000 | grep "200 OK"

  sast:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      # Initialiser CodeQL avec les bonnes configurations
      - name: Initialiser CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          # Utilisez un répertoire spécifique si nécessaire
          # If you want to specify a specific directory, add the following line:
          # repository: ./path/to/juice-shop

      # Analyser le code source de Juice Shop
      - name: Analyser avec CodeQL
        uses: github/codeql-action/analyze@v2

  sca:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      # Installer OWASP Dependency Check
      - name: Installer OWASP Dependency Check
        run: |
          curl -LO https://github.com/jeremylong/DependencyCheck/releases/download/v8.3.1/dependency-check-8.3.1-release.zip
          unzip dependency-check-8.3.1-release.zip -d dependency-check

      - name: Analyser les dépendances avec OWASP Dependency Check
        run: |
          ./dependency-check/bin/dependency-check.sh --project "Juice Shop" --scan . --format ALL --out ./dependency-check-report

      - name: Télécharger le rapport Dependency Check
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: ./dependency-check-report

  dast:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Installer OWASP ZAP
        run: sudo apt-get update && sudo apt-get install -y zaproxy

      - name: Démarrer OWASP ZAP
        run: |
          zap.sh -daemon -host 0.0.0.0 -port 8080 -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true
          sleep 15

      - name: Exécuter un scan rapide avec ZAP
        run: |
          zap-cli quick-scan --self-contained --start-options "-config api.addrs.addr.name=.* -config api.addrs.addr.regex=true" http://localhost:3000

      - name: Générer le rapport ZAP
        run: |
          zap-cli report -o zap-report.html -f html

      - name: Télécharger le rapport ZAP
        uses: actions/upload-artifact@v3
        with:
          name: zap-report
          path: zap-report.html
