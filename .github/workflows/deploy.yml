name: CI/CD Pipeline with Security Testing

on:
  push:
    branches:
      - master  # Déclenche le pipeline pour les commits dans la branche "master"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # 1. Vérifier d'abord si un conteneur Juice Shop existe déjà
    - name: Check if Juice Shop is already running
      id: check-container
      run: |
        if docker ps --filter "name=juice-shop" --filter "status=running" | grep juice-shop; then
          echo "running=true" >> $GITHUB_ENV
        else
          echo "running=false" >> $GITHUB_ENV
        fi

    # 2. Arrêter et supprimer l'ancien conteneur si nécessaire
    - name: Clean up existing container
      if: env.running == 'true'
      run: |
        docker stop juice-shop
        docker rm juice-shop

    # 3. Lancer un nouveau conteneur
    - name: Run Juice Shop container
      if: env.running == 'false'
      run: |
        docker run -d -p 3000:3000 --name juice-shop bkimminich/juice-shop:latest

    # 4. Attendre que Juice Shop démarre
    - name: Wait for Juice Shop to start
      run: |
        for i in {1..30}; do
          if curl -I http://localhost:3000 2>/dev/null | grep "200 OK"; then
            echo "Juice Shop is ready!";
            break;
          fi;
          echo "Waiting for Juice Shop...";
          sleep 2;
        done

    # 5. Tester l'application pour vérifier qu'elle fonctionne
    - name: Test application
      run: |
        curl -I http://localhost:3000 | grep "200 OK"

    # 6. Liste des conteneurs actifs pour débogage
    - name: List running containers
      run: docker ps

  # SAST (Static Application Security Testing) using CodeQL
  sast:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
    # 1. Checkout du code
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. Configurer CodeQL
    - name: Set up CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: javascript  # Utilisez javascript ou autre si nécessaire

    # 3. Analyser avec CodeQL
    - name: Analyze with CodeQL
      uses: github/codeql-action/analyze@v2
      continue-on-error: true  # Laisse le pipeline continuer même si des erreurs de sécurité sont trouvées

  # SCA (Software Composition Analysis) using Snyk
  sca:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
    # 1. Checkout du code
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. Installer Snyk
    - name: Install Snyk
      run: |
        npm install -g snyk

    # 3. Exécuter une analyse SCA avec Snyk
    - name: Run SCA scan with Snyk
      run: snyk test --all-projects

    # 4. Fixer les vulnérabilités avec Snyk
    - name: Snyk fix
      run: snyk monitor --all-projects

  # DAST (Dynamic Application Security Testing) using OWASP ZAP
  dast:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
    # 1. Lancer OWASP ZAP pour tester les vulnérabilités dynamiques sur l'application en cours d'exécution
    - name: Run DAST scan with OWASP ZAP
      run: |
        docker run -d --name zaproxy -p 8080:8080 ghcr.io/zaproxy/zaproxy:stable
        sleep 10  # Attendre que ZAP démarre
        docker exec zaproxy zap-cli quick-scan --self-contained --url http://localhost:3000

    # 2. Récupérer les résultats de l'analyse
    - name: Get ZAP report
      run: docker exec zaproxy zap-cli report -o zap_report.html

    # 3. Télécharger le rapport de l'analyse DAST
    - name: Upload DAST report
      uses: actions/upload-artifact@v3
      with:
        name: zap-report
        path: zap_report.html

  # Gestion des vulnérabilités avec DefectDojo
  defectdojo:
    runs-on: ubuntu-latest
    needs: [sast, sca, dast]

    steps:
    # 1. Télécharger et installer DefectDojo CLI
    - name: Install DefectDojo CLI
      run: |
        curl -sSL https://github.com/DefectDojo/django-DefectDojo/raw/master/requirements.txt -o requirements.txt
        pip install -r requirements.txt

    # 2. Télécharger les résultats des tests de sécurité dans DefectDojo
    - name: Upload results to DefectDojo
      run: |
        defectdojo upload --file zap_report.html --type "DAST" --engagement "Juice Shop" --test "DAST Scan" --url https://defectdojo.example.com
