name: CI/CD Pipeline with Security Testing

on: [push]

jobs:
  # Job 1: Déploiement de l'application cible
  deploy:
    runs-on: ubuntu-latest
    name: Deploy Application

    steps:
      # 1. Vérifier si Juice Shop est déjà en cours d'exécution
      - name: Check if Juice Shop is already running
        id: check-container
        run: |
          if docker ps --filter "name=juice-shop" --filter "status=running" | grep juice-shop; then
            echo "running=true" >> $GITHUB_ENV
          else
            echo "running=false" >> $GITHUB_ENV
          fi

      # 2. Arrêter et nettoyer les anciens conteneurs
      - name: Clean up existing container
        if: env.running == 'true'
        run: |
          docker stop juice-shop
          docker rm juice-shop

      # 3. Lancer Juice Shop
      - name: Run Juice Shop container
        if: env.running == 'false'
        run: |
          docker run -d -p 3000:3000 --name juice-shop bkimminich/juice-shop:latest

      # 4. Vérifier que l'application est opérationnelle
      - name: Wait for Juice Shop to start
        run: |
          for i in {1..30}; do
            if curl -I http://localhost:3000 2>/dev/null | grep "200 OK"; then
              echo "Juice Shop is ready!";
              break;
            fi;
            echo "Waiting for Juice Shop...";
            sleep 2;
          done

  # Job 2: Test de sécurité statique (SAST) avec CodeQL
  sast:
    runs-on: ubuntu-latest
    name: Static Application Security Testing

    needs: deploy

    steps:
      # 1. Cloner le dépôt
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configuration de CodeQL
      - name: Set up CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      # 3. Analyse de sécurité statique avec CodeQL
      - name: Analyze with CodeQL
        uses: github/codeql-action/analyze@v2
        continue-on-error: true

  # Job 3: Scan dynamique (DAST) avec OWASP ZAP
  zap_scan:
    runs-on: ubuntu-latest
    name: Dynamic Application Security Testing with ZAP

    needs: deploy

    steps:
      # 1. Checkout du code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Scanner avec OWASP ZAP
      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: 'http://localhost:3000' # Utiliser host.docker.internal si nécessaire
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a --exit-code 0 --allow-insecure-ssl'

      # 3. Étape de débogage supplémentaire pour les logs ZAP
      - name: Debug ZAP Docker Logs
        run: |
          echo "Collecting ZAP logs..."
          docker logs $(docker ps -q -f "ancestor=ghcr.io/zaproxy/zaproxy:stable")
