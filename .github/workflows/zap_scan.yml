name: OWASP Juice Shop DevSecOps Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  DOCKER_IMAGE: bkimminich/juice-shop
  DEFECTDOJO_URL: https://defectdojo.example.com

jobs:
  # Job de récupération et de construction de l'image
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3
      
      - name: Configuration de Docker
        uses: docker/setup-buildx-action@v2
      
      - name: Pull de l'image Docker Juice Shop
        run: docker pull ${{ env.DOCKER_IMAGE }}
      
      - name: Scan de sécurité de l'image conteneur
        uses: anchore/scan-action@v3
        with:
          image: ${{ env.DOCKER_IMAGE }}
          severity-cutoff: high

  # Job de tests de sécurité statique (SAST)
  sast-scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3
      
      - name: Analyse CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript
      
      - name: Analyse CodeQL
        uses: github/codeql-action/analyze@v2

  # Job d'analyse des composants (SCA)
  dependency-check:
    needs: sast-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3
      
      - name: Scan des dépendances
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Juice Shop'
          path: '.'
          format: 'HTML, JSON'

  # Job de tests dynamiques de sécurité (DAST)
  dast-scan:
    needs: dependency-check
    runs-on: ubuntu-latest
    steps:
      - name: Démarrage du conteneur Juice Shop
        run: docker run -d -p 3000:3000 ${{ env.DOCKER_IMAGE }}
      
      - name: Scan OWASP ZAP
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:3000'
          fail_action: false

  # Job de gestion et rapport des vulnérabilités  
  vulnerability-report:
    needs: [dast-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Envoi des résultats à DefectDojo
        run: |
          # Script personnalisé pour envoyer les résultats des scans à DefectDojo
          curl -X POST ${{ env.DEFECTDOJO_URL }}/api/v2/findings/ \
            -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_TOKEN }}" \
            -F "file=@zap-results.json"

  # Déploiement final
  deploy:
    needs: [vulnerability-report]
    runs-on: ubuntu-latest
    steps:
      - name: Déploiement sur serveur
        run: |
          # Logique de déploiement spécifique 
          ssh user@server "docker pull ${{ env.DOCKER_IMAGE }} && docker restart juice-shop"
